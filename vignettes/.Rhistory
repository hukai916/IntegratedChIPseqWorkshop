suppressPackageStartupMessages({
library(ChIPpeakAnno)
library(trackViewer)
library(biomaRt)
library(AnnotationHub)
library(EnsDb.Hsapiens.v75)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(org.Hs.eg.db)
library(UpSetR)
library(seqinr)
library(motifStack)
library(WriteXLS)
library(rtracklayer)
library(rmarkdown)
library(knitr)})
path <- system.file("extdata", "Tead4.broadPeak", package="ChIPpeakAnno")
## read in peak file:
peaks <- toGRanges(path, format="broadPeak")
## inspect the top 2 lines of the peak file in GRanges format:
head(peaks, n=2
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
annoDataTxDb <- toGRanges(TxDb.Hsapiens.UCSC.hg19.knownGene)
## inspect the first two lines of the annotation file:
head(annoDataTxDb, n=2)
path <- system.file("extdata", "Tead4.broadPeak", package="ChIPpeakAnno")
## read in peak file:
peaks <- toGRanges(path, format="broadPeak")
## inspect the top 2 lines of the peak file in GRanges format:
head(peaks, n=2)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
annoDataTxDb <- toGRanges(TxDb.Hsapiens.UCSC.hg19.knownGene)
## inspect the first two lines of the annotation file:
head(annoDataTxDb, n=2)
## annotate by the nearest TSS based on UCSC hg19 annotations
annoTxDb <- annotatePeakInBatch(peaks, AnnotationData=annoDataTxDb)
## inspect the first two lines of the annotation:
head(annoTxDb, n=2)
library(org.Hs.eg.db)
## add in gene symbol
annoTxDb <- addGeneIDs(annoTxDb, orgAnn="org.Hs.eg.db",
feature_id_type="entrez_id",
IDs2Add=c("symbol"))
## inspect the first two lines:
head(annoTxDb, n=2)
library(ChIPpeakAnno)
## convert BED file to GRanges:
bed <- system.file("extdata", "MACS_output.bed", package="ChIPpeakAnno")
gr1 <- toGRanges(bed, format="BED", header=FALSE)
## convert GFF file to GRanges:
gff <- system.file("extdata", "GFF_peaks.gff", package="ChIPpeakAnno")
gr2 <- toGRanges(gff, format="GFF", header=FALSE, skip=3)
## must keep the class of gr2$score the same as gr1$score, i.e., numeric:
gr2$score <- as.numeric(gr2$score)
## find overlaps:
ol <- findOverlapsOfPeaks(gr1, gr2, connectedPeaks = "keepAll")
## add metadata (mean of score) to the overlapping peaks
ol <- addMetadata(ol, colNames="score", FUN=mean)
## inspect the first two lines of overlapping peaks:
head(ol$peaklist[["gr1///gr2"]], n=2)
## make a Venn diagram:
makeVennDiagram(ol, fill=c("#009E73", "#F0E442"),
col=c("#D55E00", "#0072B2"),
cat.col=c("#D55E00", "#0072B2"))
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
## get overlapping peaks:
overlaps <- ol$peaklist[["gr1///gr2"]]
## find peak site distribution:
aCR <- assignChromosomeRegion(overlaps, nucleotideLevel=FALSE,
precedence=c("Promoters",
"immediateDownstream",
"fiveUTRs",
"threeUTRs",
"Exons",
"Introns"),
TxDb=TxDb.Hsapiens.UCSC.hg19.knownGene)
## use barplot to visualize:
barplot(aCR$percentage, las=3)
fig.width=6, fig.height=3}
binOverFeature(overlaps, annotationData=annoDataTxDb,
radius=5000, nbins=20, FUN=length, errFun=0,
ylab="count",
main="Distribution of aggregated peak numbers around TSS")
binOverFeature(overlaps, annotationData=annoDataTxDb,
radius=5000, nbins=20, FUN=length, errFun=0,
ylab="count",
main="Distribution of aggregated peak numbers around TSS")
library(org.Hs.eg.db)
## annotate to promoter regions:
overlaps.anno <- annotatePeakInBatch(overlaps,
AnnotationData=annoDataTxDb,
output="nearestBiDirectionalPromoters",
bindingRegion=c(-2000, 500))
## add in gene symbol:
overlaps.anno <- addGeneIDs(overlaps.anno,
"org.Hs.eg.db",
feature_id_type="entrez_id",
IDs2Add = "symbol")
## visualized the first two lines:
head(overlaps.anno, n=2)
## find bi-directional promoters:
bdp <- peaksNearBDP(overlaps, annoDataTxDb, maxgap=5000)
## some statistics:
c(bdp$percentPeaksWithBDP,
bdp$n.peaks,
bdp$n.peaksWithBDP)
## show first two lines:
head(bdp$peaksWithBDP, n=2)
library(seqinr)
library(BSgenome.Hsapiens.UCSC.hg19)
## obtain peak sequences:
seq <- getAllPeakSequence(overlaps,
upstream=20, downstream=20,
genome=Hsapiens)
## output the fasta file for the 3nd program:
#write2FASTA(seq, "test.fa")
## summarize short oligos:
os <- oligoSummary(seq, oligoLength=6, MarkovOrder=3, quickMotif=TRUE)
## plot z-scores:
zscore <- sort(os$zscore)
h <- hist(zscore, breaks=100, main="Histogram of Z-score")
text(zscore[length(zscore)], max(h$counts)/10,
labels=names(zscore[length(zscore)]), srt=90)
library(motifStack)
## generate the motifs:
pfms <- mapply(function(.ele, id)
new("pfm", mat=.ele, name=paste("SAMPLE motif", id)),
os$motifs, 1:length(os$motifs))
motifStack(pfms)
library(rtracklayer)
## recenter features:
features <- ol$peaklist[[length(ol$peaklist)]]
feature.recentered <- reCenterPeaks(features, width=4000)
## read in data:
files <- dir(path, "bigWig")
if(.Platform$OS.type != "windows"){
cvglists <- sapply(file.path(path, files), import,
format="BigWig",
which=feature.recentered,
as="RleList")
} else {
load(file.path(path, "cvglist.rds"))
}
## extract signal:
names(cvglists) <- gsub(".bigWig", "", files)
feature.center <- reCenterPeaks(features, width=1)
sig <- featureAlignedSignal(cvglists, feature.center,
upstream=2000, downstream=2000)
## output heatmap
keep <- rowSums(sig[[2]]) > 0
sig <- sapply(sig, function(.ele) .ele[keep, ], simplify = FALSE)
feature.center <- feature.center[keep]
heatmap <- featureAlignedHeatmap(sig, feature.center,
upstream=2000, downstream=2000,
upper.extreme=c(3,.5,4))
library(rtracklayer)
## recenter features:
features <- ol$peaklist[[length(ol$peaklist)]]
feature.recentered <- reCenterPeaks(features, width=4000)
## read in data:
files <- dir(path, "bigWig")
if(.Platform$OS.type != "windows"){
cvglists <- sapply(file.path(path, files), import,
format="BigWig",
which=feature.recentered,
as="RleList")
} else {
load(file.path(path, "cvglist.rds"))
}
## extract signal:
names(cvglists) <- gsub(".bigWig", "", files)
feature.center <- reCenterPeaks(features, width=1)
sig <- featureAlignedSignal(cvglists, feature.center,
upstream=2000, downstream=2000)
library(rtracklayer)
## recenter features:
features <- ol$peaklist[[length(ol$peaklist)]]
feature.recentered <- reCenterPeaks(features, width=4000)
files <- dir(path, "bigWig")
if(.Platform$OS.type != "windows"){
cvglists <- sapply(file.path(path, files), import,
format="BigWig",
which=feature.recentered,
as="RleList")
} else {
load(file.path(path, "cvglist.rds"))
}
names(cvglists) <- gsub(".bigWig", "", files)
feature.center <- reCenterPeaks(features, width=1)
feature.center
sig <- featureAlignedSignal(cvglists, feature.center,
upstream=2000, downstream=2000)
library(rtracklayer)
## recenter features:
features <- ol$peaklist[[length(ol$peaklist)]]
feature.recentered <- reCenterPeaks(features, width=4000)
## read in data:
path <- system.file("extdata", package="ChIPpeakAnno")
files <- dir(path, "bigWig")
if(.Platform$OS.type != "windows"){
cvglists <- sapply(file.path(path, files), import,
format="BigWig",
which=feature.recentered,
as="RleList")
} else {
load(file.path(path, "cvglist.rds"))
}
## extract signal:
names(cvglists) <- gsub(".bigWig", "", files)
feature.center <- reCenterPeaks(features, width=1)
sig <- featureAlignedSignal(cvglists, feature.center,
upstream=2000, downstream=2000)
## output heatmap
keep <- rowSums(sig[[2]]) > 0
sig <- sapply(sig, function(.ele) .ele[keep, ], simplify = FALSE)
feature.center <- feature.center[keep]
heatmap <- featureAlignedHeatmap(sig, feature.center,
upstream=2000, downstream=2000,
upper.extreme=c(3,.5,4))
